name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  batch: true
  branches:
    include:
      - main
pr: none

resources:
  repositories:
    - repository: templates
      type: github
      name: microsoft/vscode-engineering
      ref: main
      endpoint: Monaco

parameters:
  - name: publishPackage1
    displayName: ðŸš€ Publish l10n-dev
    type: boolean
    default: false
  - name: publishPackage2
    displayName: ðŸš€ Publish l10n
    type: boolean
    default: false

extends:
  template: azure-pipelines/npm-package/pipeline.yml@templates
  parameters:
    npmPackages:
      - name: l10n-dev

        buildSteps:
          - script: |
              # tree-sitter-cli will use docker and setup emcc when emsdk is
              # not found locally. However, the solution does not work well
              # with tree-sitter-typescript plugin. The docker solution mounts
              # `plugin-path/src` as seen in https://github.com/tree-sitter/tree-sitter/blob/c76e5fa96052337fe69047557c2b08a5acc08360/cli/loader/src/lib.rs#L789
              # in this case would be `node_modules/tree-sitter-typescript/typescript/src`
              # but the plugin also has sources outside this directory `https://github.com/tree-sitter/tree-sitter-typescript/tree/master/common`
              # which will lead to compilation failure. Ideally this should be
              # addressed in the plugin, the following is a workaround to avoid
              # the docker fallback.
              git clone https://github.com/emscripten-core/emsdk.git /tmp/emsdk
              /tmp/emsdk/emsdk install latest
              /tmp/emsdk/emsdk activate latest
            displayName: Setup emcc
          - script: npm ci
            workingDirectory: $(Build.SourcesDirectory)/l10n-dev
            displayName: Install dependencies
          - script: |
              export PATH=$PATH:/tmp/emsdk:/tmp/emsdk/upstream/emscripten
              npm run build-wasm
            workingDirectory: $(Build.SourcesDirectory)/l10n-dev
            displayName: Build wasm grammars
          - script: npm run compile
            workingDirectory: $(Build.SourcesDirectory)/l10n-dev
            displayName: Compile npm package

        testPlatforms:
          - name: Linux
            nodeVersions:
              - 18.x

        testSteps:
          - script: |
              git clone https://github.com/emscripten-core/emsdk.git /tmp/emsdk
              /tmp/emsdk/emsdk install latest
              /tmp/emsdk/emsdk activate latest
            displayName: Setup emcc
          - script: npm ci
            workingDirectory: $(Build.SourcesDirectory)/l10n-dev
            displayName: Install dependencies
          - script: |
              export PATH=$PATH:/tmp/emsdk:/tmp/emsdk/upstream/emscripten
              npm run build-wasm
            workingDirectory: $(Build.SourcesDirectory)/l10n-dev
            displayName: Build wasm
          - script: npm run compile
            workingDirectory: $(Build.SourcesDirectory)/l10n-dev
            displayName: Compile npm package
          - script: npm run test
            workingDirectory: $(Build.SourcesDirectory)/l10n-dev
            displayName: Test npm package

        ghTagPrefix: l10n-dev/v
        publishPackage: ${{ parameters.publishPackage1 }}
        workingDirectory: $(Build.SourcesDirectory)/l10n-dev
        publishRequiresApproval: false
        skipAPIScan: true # Requires Linux to build WASM grammars

      - name: l10n

        buildSteps:
          - script: npm ci
            workingDirectory: $(Build.SourcesDirectory)/l10n
            displayName: Install dependencies
          - script: npm run compile
            workingDirectory: $(Build.SourcesDirectory)/l10n
            displayName: Compile npm package

        testPlatforms:
          - name: Linux
            nodeVersions:
              - 18.x
          - name: Windows
            nodeVersions:
              - 18.x

        testSteps:
          - script: npm ci
            workingDirectory: $(Build.SourcesDirectory)/l10n
            displayName: Install dependencies
          - script: npm run compile
            workingDirectory: $(Build.SourcesDirectory)/l10n
            displayName: Compile npm package
          - script: npm run test
            workingDirectory: $(Build.SourcesDirectory)/l10n
            displayName: Test npm package

        ghTagPrefix: l10n/v
        publishPackage: ${{ parameters.publishPackage2 }}
        workingDirectory: $(Build.SourcesDirectory)/l10n
        publishRequiresApproval: false
